print("Hello")
LS
s
ls
r
pwd
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
train <- read.csv("~/Desktop/CS/R/Titanic/train.csv")
View(train)
test <- read.csv("~/Desktop/CS/R/Titanic/test.csv")
View(test)
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
#for prediction of discrete (like survival) variable method="class". For continuous (like age,time) method="anove"
plot(fit)
text(fit)
install.packages('rattle')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
decay
library("shallot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
mass <- mass(1.0, fixed = TRUE)
View(mass)
mass <- mass(1.4, fixed = TRUE)
View(mass)
mass <- mass(1.4, fixed = FALSE)
mass <- mass(1.0, fixed = TRUE)
decay <- decay.exponential(temperature(1.0),dist(scale(USArrests)))
View(decay)
attraction <- attraction(permutation(n.items=50,fixed=FALSE), decay)
pd3 <- ddcrp(mass(1), attraction)
View(pd3)
pd3[["names"]]
USArrests
scale(USArrests)
dist(scale(USArrests))
temperature(1.0)
decay.exponential(temperature(1.0),dist(scale(USArrests)))
View(pd3)
pd3[["names"]]
print(x, ...)
pd3.pmf
pd3.pmf(pd3[["names"]])
pd3
load("~/Desktop/CS/Stuffs/DeepL/PlatformAnalysis/example.R")
load("~/Desktop/CS/Stuffs/DeepL/PlatformAnalysis/example.R")
setwd("~/Desktop/CS/Stuffs/DeepL/PlatformAnalysis/example.R")
setwd("~/Desktop/CS/Stuffs/DeepL/PlatformAnalysis")
library('Matrix')
source("ddcrp-inference.R")
setwd("~/Desktop/CS/Stuffs/DeepL/PlatformAnalysis/ddcrp/")
file.edit("ddcrp.R")
library('Matrix')
source("ddcrp-inference.R")
seq.dist <- function(i,j)
{
return(stdist[i,j])
}
doc.lhood <- function(docs, lambda)
{
if (is.null(dim(docs)))
return(exch.dirichlet.lhood(docs, lambda))
else
return(exch.dirichlet.lhood(colSums(docs), lambda))
}
doc.lhood.fn <- function(lambda) function (dat) doc.lhood(dat, lambda)
heldout.doc.lhood <- function(doc, dists, alpha, eta, post.dir, decay.fn, state)
{
# for each doc compute the log prior probability of each component
log.prior <- safelog(decay.fn(dists))
log.prior[length(log.prior)+1] <- log(alpha)
log.prior <- log.prior - log.sum(log.prior)
# for each doc compute the probability of the document under each component
log.like <- apply(post.dir, 1, function (a) dirichlet.lhood(doc, a))
names(log.like) <- rownames(post.dir)
log.like <- log.like[char(state$cluster)]
log.like[length(log.like) + 1] <- exch.dirichlet.lhood(doc, eta)
# return the sum
sum(log.prior + log.like)
}
compute.posterior.dirichlets <- function(dat, state, eta)
{
comps <- sort(unique(state$cluster))
post.dir <- laply(comps, function (k) colsum(dat[state$cluster==k,]) + eta)
rownames(post.dir) <- comps
colnames(post.dir) <- colnames(dat)
post.dir
}
heldout.lhoods <- function(dat.ho, ho.idx, dat.obs, map.state,
dist.fn, decay.fn, alpha, lambda)
{
one.doc <- function (doc, idx)
{
msg(sprintf("computing likelihood for doc %d", idx))
dists <- laply(seq(1, dim(dat.obs)[1]), function (i) dist.fn(idx, i))
heldout.doc.lhood(doc, dists, alpha, lambda, post.dir, decay.fn, map.state)
}
post.dir <- compute.posterior.dirichlets(dat.obs, map.state, lambda)
stopifnot(dim(dat.ho)[1] == length(ho.idx))
laply(1:length(ho.idx), function (i) one.doc(dat.ho[i,], ho.idx[i]))
}
##CIKM script
setwd("C:/Users/prasantab/Downloads/ddcrp_subtasks-master/ddcrp_subtasks-master/ddcrp")
##CIKM script
setwd("~/Desktop/CS/Stuffs/DeepL/PlatformAnalysis/ddcrp")
docs <- readLines("Bigram_Quora.csv")
corpus <- Corpus(VectorSource(docs))
install.packages("tm")
corpus <- Corpus(VectorSource(docs))
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
